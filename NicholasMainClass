//AUTHOR: Nathaniel Nicholas
//COURSE: CPT187
//PURPOSE: To provide the user with a menu based shopping service, including discounts, prizes and various reports
//CREATEDATE: 2/24/22

package edu.cpt167.nicholas.exercise7;

import java.util.Scanner;

public class MainClass
{
	public static final char[] MENU_CHARS =
		{ 'A', 'B', 'Q' };
	public static final String[] MENU_OPTIONS =
		{ "Login", "Create an Account", "Quit" };
	public static final char[] FILE_MENU_CHARS =
		{ 'A', 'B', 'R' };
	public static final String[] FILE_MENU_OPTIONS =
		{ "Load Inventory", "Create Order", "Return to Main Menu" };
	public static final char[] SUB_MENU_CHARS =
		{ 'A', 'B', 'C', 'D' };
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	// main method
	public static void main(String[] args)
	{
		// declare the supportive classes
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		// declare and initialize the scanner
		Scanner input = new Scanner(System.in);

		// declare and initialize all local variables
		String userName = "";
		char menuSelection = ' ';

		// display the welcome banner
		displayWelcomeBanner();

		// prime read for the main menu
		menuSelection = validateMainMenu(input);

		// run-while (not quit)
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);

			if (menuSelection != 'A') // login
			{
				currentUser.setSearchedIndex(userName);
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}
			}
			else // create user
			{
				currentUser.setSearchedIndex(userName, getPassword(input));

				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}
				else
				{
					menuSelection = validateFileSelection(input);

					while (menuSelection != 'R')
					{
						// selection structure
						if (menuSelection == 'A') // Load Inventory
						{
							// loads inventory
							currentInventory.setLoadItems(getFileName(input));
							if (currentInventory.getRecordCount() <= 0)
							{
								// displays not open
								displayFileError();
							}
							// displays the record report
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}
						}
						// validates search value
						else // Create Order
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							// displays not found
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}
							// displays the results
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));
								// displays out of stock message
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder
										.getHowMany())
								{
									displayOutOfStock();
								}
								// displays the results
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input,
											currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(),
											currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(),
											currentOrder.getItemPrice(), currentOrder.getHowMany(),
											currentOrder.getTotalCost());

									// displays the order report without discount
									if (currentOrder.getDiscountRate() > 0.0)
									{
										// displays the order report
										displayOrderReport(userName, currentOrder.getItemName(),
												currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(),
												currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}
									// displays the order report
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(),
												currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									} // end of else: discount rate > 0
								} // end of else: out of stock
							} // if (currentInventory.getItemSearchIndex() < 0)
						} // end if (menuSelection == 'A') - fileMenu
						menuSelection = validateFileSelection(input);
					} // end of while (menuSelection != 'A')
				}
			}
			// validation for menu selection
			menuSelection = validateMainMenu(input);
		} // end of run-while input loop
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(),
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(),
					currentInventory.getGrandTotal());
		}

		// display the farewell message
		displayFarewellMessage();

		// close scanner
		input.close();
	}

	// voids!

	// void method to display the welcome banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Home Improvement Program");
		System.out.println("This program will allow you to choose the best needs for you");
		System.out.println("and also provides discounts and payment fees");
		// border
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ****** *****");
	}// end of void method to display the welcome banner

	// void method to display the farewell message
	public static void displayFarewellMessage()
	{
		// display the farewell message
		System.out.println("\nThank you for using the Home Improvement Program!");
		System.out.println("Have a nice day!");
	}// end of void method to display the farewell message

	// void method to display the main menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		// menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// menu title
		System.out.println("MAIN MENU");
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%1s%5s%-25s\n", MENU_CHARS[localIndex], " for ", MENU_OPTIONS[localIndex]);
			localIndex++;
		}
		// menu options
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		// menu prompt
		System.out.println("Enter your selection here:");
	}// end of void method to display the main menu

	// void method to display the item menu
	public static void displayFileMenu()
	{
		int localIndex = 0;
		// menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// menu title
		System.out.println("FILE MENU");
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%1s%5s%-25s\n", FILE_MENU_CHARS[localIndex], " for ", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}
		// menu options
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		// menu prompt
		System.out.println("Enter your selection here:");
	}// end of void method to display the item menu

	// void method to display the item menu
	public static void displayItemMenu(String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		int localIndex = 0;
		// menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// menu title
		System.out.println("ITEM MENU");
		while (localIndex < borrowedItemNames.length)
		{
			// menu options
			System.out.printf("%1s%5s%-25s%1s%8.2f\n", SUB_MENU_CHARS[localIndex], " for ",
					borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex]);
			localIndex++;
		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		// menu prompt
		System.out.println("Please make your selection here:");
	}// end of void method to display the item menu

	// void method to display the discount menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		// menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// menu title
		System.out.println("DISCOUNT MENU");
		while (localIndex < borrowedDiscountNames.length)
		{
			// menu options
			System.out.printf("%1s%-5s%-35s%5.1f%%\n", SUB_MENU_CHARS[localIndex], " for ",
					borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100);
			localIndex++;
		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		// menu prompt
		System.out.println("Please make your selection here:");
	}// end of void method to display the discount menu

	// void method to display the records processed
	public static void displayRecordReport(int borrowedRecordCount)
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// inventory process message
		System.out.println("RECORD REPORT");
		System.out.printf("[%03d] records processed\n", borrowedRecordCount);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// end of void method to records processed

	// void method to display out-of-stock error
	public static void displayOutOfStock()
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// end of void method to display out-of-stock error

	// void method to display file error
	public static void displayFileError()
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// end of void method to display file error

	// void method to display not found error
	public static void displayNotFound()
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// end of void method to display not found error

	// void method to display not found error
	public static void displayLoginError()
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// end of void method to display not found error

	public static void displayAccountResults()
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	public static void displayAccountResults(String borrowedUserName)
	{
		// border
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		// error message
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, [name], already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	// void method to display the order report with discounts
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice,
			int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt,
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		// menu
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// menu title
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// menu details
		System.out.printf("%-23s%s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-23s%s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-23s%-1s%8.2f\n", "Item Price", "$", borrowedItemPrice);
		System.out.printf("\n%-23s%s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-26s%5.1f%%\n", "Discount Rate:", 100 * borrowedDiscountRate);
		System.out.printf("%-23s%-1s%8.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-23s%-1s%8.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.printf("\n%-21s%8d\n", "Quantity:", borrowedHowMany);
		System.out.printf("\n%-23s%-1s%8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-27s%4.1f%%\n", "Tax Rate:", 100 * borrowedTaxRate);
		System.out.printf("%-23s%-1s%8.2f\n", "Tax Amount:", "$", borrowedTax);
		System.out.printf("\n%-23s%-1s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-23s%-30s\n", "Prize Name:", borrowedPrizeName);
		System.out.printf("\nBuy more now: Only [%02d] left in stock!\n", borrowedInStockCounts);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}// end of void method to display the order report

	// void method to display the order report without discounts
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice,
			int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		// menu
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// menu title
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// menu details
		System.out.printf("%-23s%s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-23s%s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-23s%-1s%8.2f\n", "Item Price", "$", borrowedItemPrice);
		System.out.printf("\n%-21s%8d\n", "Quantity:", borrowedHowMany);
		System.out.printf("\n%-23s%-1s%8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-27s%4.1f%%\n", "Tax Rate:", 100 * borrowedTaxRate);
		System.out.printf("%-23s%-1s%8.2f\n", "Tax Amount:", "$", borrowedTax);
		System.out.printf("\n%-23s%-1s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-23s%-30s\n", "Prize Name:", borrowedPrizeName);
		System.out.printf("\nBuy more now: Only [%02d] left in stock!\n", borrowedInStockCounts);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}// end of void method to display the order report without discounts

	// void method to display the final report
	public static void displayFinalReport(int[] borrowedIDs, String[] borrowedItemNames, double[] borrowedItemPrices,
			int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount,
			double borrowedGrandTotal)
	{
		int localIndex = 0;

		// report
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// report title
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		// report details
		System.out.printf("%-5s %-17s %-13s %-7s %-5s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		while (localIndex < borrowedRecordCount)
		{
			System.out.printf("[%03d] [%15s] $ [%6.2f]    [%02d]    $ [%6.2f]\n", borrowedIDs[localIndex],
					borrowedItemNames[localIndex], borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex],
					borrowedOrderTotals[localIndex]);
			localIndex++;
		}
		System.out.printf("\n%11s\n", "GRAND TOTAL");
		System.out.printf("%-3s%1s%5.2f%1s\n", "$", "[", borrowedGrandTotal, "]");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}// end of void method to display the final report

	// VRs!

	// vr method to get the user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		// prime read
		System.out.println("Enter your username:");
		borrowedInput.nextLine();
		localUserName = borrowedInput.nextLine();
		return localUserName;
	}// end of vr method for user name

	// vr method to get the password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		// prime read
		System.out.println("Enter your password:");
		localPassword = borrowedInput.nextLine();
		return localPassword;
	}// end of vr method for password

	// vr method to get the file name
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		borrowedInput.nextLine(); // extra newline in buffer
		// prime read
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Enter the file name with extension (i.e file.txt):");
		localFileName = borrowedInput.nextLine();
		return localFileName;
	}// end of vr method for file name

	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		// prime read
		System.out.println("Please enter a quantity: ");
		localHowMany = borrowedInput.next();
		// validation loop
		while (Integer.parseInt(localHowMany) <= 0)
		{
			// error message
			System.out.println("~~ERROR: Invalid quantity.~~~");
			// update read
			System.out.println("Please enter a quantity: ");
			localHowMany = borrowedInput.next();
		} // end of the validation loop
		return localHowMany;
	}// end of the method to validate how many

	// vr method to validate search
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchedIndex = 0;
		// prime read
		System.out.println("Enter the search value: ");
		localSearchedIndex = borrowedInput.nextInt();
		// validation loop
		while (localSearchedIndex <= 0)
		{
			// error message
			System.out.println("~~ERROR: Invalid value.~~~");
			// update read
			System.out.println("Enter the search value: ");
			localSearchedIndex = borrowedInput.nextInt();
		} // end of the validation loop
		return localSearchedIndex;
	}// end of the method to validate search

	// vr method to validate the selection from the main menu
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';
		// prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		// validation loop
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			// error message
			System.out.println("~~ERROR: Invalid selection.~~~");
			// update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // end of the validation loop
		return localSelection;
	}// end of the method to validate the selection from the main menu

	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		// prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		// validation loop
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1]
				&& localSelection != FILE_MENU_CHARS[2])
		{
			// error message
			System.out.println("~~ERROR: Invalid selection.~~~");
			// update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // end of the validation loop
		return localSelection;
	}

	// vr method to validate the selection from the item menu
	public static char validateItemMenu(Scanner borrowedInput, String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		char localSelection = ' ';
		// prime read
		displayItemMenu(borrowedItemNames, borrowedItemPrices);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		// validation loop
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1]
				&& localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			// error message
			System.out.println("~~ERROR: Invalid selection.~~~");
			// update read
			displayItemMenu(borrowedItemNames, borrowedItemPrices);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // end of validation loop
		return localSelection;
	}// end of the method to validate the selection from the item menu

	// vr method to validate the selection from the discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames,
			double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		// prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		// validation loop
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1]
				&& localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			// error message
			System.out.println("~~ERROR: Invalid selection.~~~");
			// update read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // end of the validation loop
		return localSelection;
	}// end of the method to validate the selection from the discount menu

}// end of main class
