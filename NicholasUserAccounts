//AUTHOR: Nathaniel Nicholas
//COURSE: CPT187
//PURPOSE: Holds the login information of the user, once provided with the username and password
//CREATEDATE: 2/24/22

package edu.cpt167.nicholas.exercise7;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class UserAccounts
{
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;

	// constructor
	public UserAccounts(String borrowedFileName)
	{
		masterFileName = borrowedFileName;
	}// end of constructor

	// setters

	// setter for set user account arrays
	public void setUserAccountArrays()
	{
		recordCount = RESET_VALUE;
		// try block
		try
		{
			Scanner infile = new Scanner(new FileInputStream(masterFileName));
			while (infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{
				// login information finders
				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();

				recordCount++;
			} // end of while
			infile.close();
		} // end of try
		// catch block
		catch (IOException ex)
		{
			// error
		} // end of catch
	}// end of setter for set user account arrays

	// setter for searched index
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	}// end of setter for searched index

	// setter for searched index (includes password test)
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
		if (searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
		{
			searchedIndex = NOT_FOUND;
		}
	}// end of setter for searched index (includes password test)

	// setter for write one record
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		recordCount = RESET_VALUE;
		// try block
		try
		{
			// always append
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, true));

			// print f statement that writes to the file
			filePW.printf("%s\t%s%n", borrowedUserName, borrowedPassword);

			// close the pw file
			filePW.close();
		} // end of try block
		// catch block
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		} // end the catch block
	}// end of setter for write one record

	// getters

	// getter for seq search
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;

		while (localIndex < recordCount)
		{
			if (borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]) == true)
			{
				localFound = localIndex;
				localIndex = recordCount;
			}
			else
			{
				localIndex++;
			}
		}
		return localFound;
	}// end of getter for seq search

	// getter for password match
	public boolean getPasswordMatch(String borrowedBorrowedPassword)
	{
		return (passwords[searchedIndex].equals(borrowedBorrowedPassword) == true);
	}// end of getter for password match

	// getter for file name
	public String getFileName()
	{
		return masterFileName;
	}// end of getter for file name

	// getter for maximum records
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}// end of getter for maximum records

	// getter for record count
	public int getRecordCount()
	{
		return recordCount;
	}// end of getter for record count

	// getter for searched index
	public int getSearchedIndex()
	{
		return searchedIndex;
	}// end of getter for search index

}// end of supportive class
